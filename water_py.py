# -*- coding: utf-8 -*-
"""Water.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IpBSbpKtsDLvGjl-yoLX3UiFWaFGXrNM
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.impute import SimpleImputer
import pickle
import matplotlib.pyplot as plt

# Set Streamlit title and page configuration
st.set_page_config(
    page_title="Water Potability Prediction",
    page_icon=":droplet:",
    layout="wide"
)

# Set background image
st.markdown(
    """
    <style>
    .reportview-container {
        background: url('https://hse.ok.ubc.ca/wp-content/uploads/sites/72/2022/10/Water.png') no-repeat center center fixed;
        background-size: cover;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# Load the dataset
data = pd.read_csv("water_potability.csv")  # Replace "your_dataset.csv" with the actual file path

# Display the dataset
st.subheader("Dataset")
st.write(data)

# Preprocess the data
imputer = SimpleImputer(strategy="mean")
data = imputer.fit_transform(data)

# Split the data into features (X) and target (y)
X = data[:, :-1]
y = data[:, -1]

# Load the trained model
model = pickle.load(open("Random_Forest_Water.py", "rb"))  # Replace "model.pkl" with the actual file path of your model

# User input for prediction
st.sidebar.title("Enter Water Parameters")
ph = st.sidebar.number_input("pH")
hardness = st.sidebar.number_input("Hardness")
solids = st.sidebar.number_input("Solids")
chloramines = st.sidebar.number_input("Chloramines")
sulfate = st.sidebar.number_input("Sulfate")
conductivity = st.sidebar.number_input("Conductivity")
organic_carbon = st.sidebar.number_input("Organic Carbon")
trihalomethanes = st.sidebar.number_input("Trihalomethanes")
turbidity = st.sidebar.number_input("Turbidity")

# Create feature vector from user inputs
features = np.array([[ph, hardness, solids, chloramines, sulfate, conductivity, organic_carbon, trihalomethanes, turbidity]])

# Predict water potability
prediction = model.predict(features)

# Display the prediction
st.subheader("Prediction")
if prediction == 0:
    st.write("Non-Potable Water")
else:
    st.write("Potable Water")

# Prediction graph
st.subheader("Prediction Graph")
probabilities = model.predict_proba(features)[0]
labels = ["Non-Potable", "Potable"]
plt.bar(labels, probabilities)
plt.xlabel("Water Potability")
plt.ylabel("Probability")
st.pyplot()

# Add disclaimer
st.sidebar.markdown("---")
st.sidebar.markdown("**Disclaimer:** This is a simple prediction model and the results may not be accurate. Please consult a water quality expert for precise analysis.")

